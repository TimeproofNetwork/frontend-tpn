const { ethers } = require("hardhat");

const TPN_TOKEN = "0xA7e3976928332e90DE144f6d4c6393B64E37bf6C";
const BADGE_NFT = "0x49A5f62fEb8ADd7323cc14a205a60608378c1D75";
const TOKEN_REGISTRY = "0x0c1Fd60957B5192cd1A31ae3407F3F8bB57A26a6";

// ‚úÖ Final TokenRegistry

// üìª Radio Marine Theme ‚Äì 6 Tokens (last is fingerprint clone)
const TOKENS = [
  { name: "sonarflux", symbol: "snf" },
  { name: "wavecaster", symbol: "wvc" },
  { name: "beaconcore", symbol: "bcn" },
  { name: "navstream", symbol: "nav" },
  { name: "marinepulse", symbol: "mpl" },
  { name: "marinepulse", symbol: "mpl" } // ‚ùå Should trigger fingerprint rejection
];

const sleep = (ms) => new Promise((res) => setTimeout(res, ms));

async function main() {
  const [deployer] = await ethers.getSigners();
  console.log("üîê Using deployer:", deployer.address);

  const TPN = await ethers.getContractAt("TPNToken", TPN_TOKEN);
  const Registry = await ethers.getContractAt("TokenRegistry", TOKEN_REGISTRY);

  const approveTx = await TPN.approve(TOKEN_REGISTRY, ethers.utils.parseUnits("1000", 18));
  await approveTx.wait();
  console.log("‚úÖ Approved 1000 TPN to TokenRegistry");

  for (const t of TOKENS) {
    console.log(`‚è≥ Deploying: "${t.name}" (${t.symbol})...`);

    const Token = await ethers.getContractFactory("TPNToken");
    const deployed = await Token.deploy(
      t.name,
      t.symbol,
      18,
      ethers.utils.parseUnits("1000000", 18),
      deployer.address,
      {
        maxFeePerGas: ethers.utils.parseUnits("50", "gwei"),
        maxPriorityFeePerGas: ethers.utils.parseUnits("2", "gwei")
      }
    );
    await deployed.deployed();
    console.log(`üìå Deployed Token (Attempt): "${t.name}" (${t.symbol}) at: ${deployed.address}`);

    try {
      const tx = await Registry.registerToken(
        t.name,
        t.symbol,
        deployed.address,
        1, // Trust Level
        {
          maxFeePerGas: ethers.utils.parseUnits("50", "gwei"),
          maxPriorityFeePerGas: ethers.utils.parseUnits("2", "gwei")
        }
      );
      await tx.wait();
      console.log(`‚úÖ Registered & Badge Minted: "${t.name}" (${t.symbol})`);
    } catch (err) {
      const reason =
        err?.error?.message ||
        err?.reason ||
        err?.data?.message ||
        err.message ||
        "Unknown";
      console.log(`‚ùå Rejected: "${t.name}" (${t.symbol})\n   Reason: ${reason}`);
    }

    await sleep(8000); // Respect Sepolia rate limits
  }

  const final = await TPN.balanceOf(deployer.address);
  console.log("üîé Final TPN Balance:", ethers.utils.formatUnits(final, 18));
}

main().catch((error) => {
  console.error("‚ùå Script Failed:", error);
  process.exit(1);
});








